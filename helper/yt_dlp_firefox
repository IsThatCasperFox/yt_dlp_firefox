#!/usr/bin/env -S python3 -u

# Note that running python with the `-u` flag is required on Windows,
# in order to ensure that stdin and stdout are opened in binary, rather
# than text, mode.

import json
import struct
import sys
import configparser
from pathlib import Path
from subprocess import Popen, run


# Read a message from stdin and decode it.
def get_message():
    raw_length = sys.stdin.buffer.read(4)

    if not raw_length:
        sys.exit(0)
    message_length = struct.unpack("=I", raw_length)[0]
    message = sys.stdin.buffer.read(message_length).decode("utf-8")
    return json.loads(message)


# Encode a message for transmission, given its content.
def encode_message(message_content):
    encoded_content = json.dumps(message_content).encode("utf-8")
    encoded_length = struct.pack("=I", len(encoded_content))
    #  use struct.pack("10s", bytes), to pack a string of the length of 10 characters
    return {
        "length": encoded_length,
        "content": struct.pack(str(len(encoded_content)) + "s", encoded_content),
    }


# Send an encoded message to stdout.
def send_message(encoded_message):
    sys.stdout.buffer.write(encoded_message["length"])
    sys.stdout.buffer.write(encoded_message["content"])
    sys.stdout.buffer.flush()

def read_user_config():
    config = configparser.ConfigParser()
    with open(user_config_path) as config_file:
        file_content = '[s]\n' + config_file.read()
    config.read_string(file_content)
    global DOWNLOAD_PATH
    global OPTIONS
    try:
        DOWNLOAD_PATH = Path(config['s']['download_directory'])
    except KeyError:
        pass
    try:
        OPTIONS = config['s']['yt_dlp_options'].split()
    except KeyError:
        pass

DOWNLOAD_PATH = ''
OPTIONS = ''
user_config_path = Path.home() / ".config" / "yt_dlp_firefoxrc"

if Path.is_file(user_config_path):
   result = read_user_config()

DEFAULT_DOWNLOAD_PATH = Path.home() / "Downloads"
if not DOWNLOAD_PATH:
    DOWNLOAD_PATH = DEFAULT_DOWNLOAD_PATH

DEFAULT_OPTIONS = ["yt-dlp", "--print-json", "--"]
if not OPTIONS:
    OPTIONS = DEFAULT_OPTIONS

message = get_message()

action = message["action"]
if action == "test":
    reply = {"success": True}
elif action == "download":
    try:
        user_addon_options = message["options"]
    except KeyError:
       user_addon_options = ''
    if user_addon_options:
        OPTIONS = user_addon_options
    try:
        user_addon_download_path = message["download_path"]
    except KeyError:
       user_addon_download_path = ''
    if user_addon_download_path:
        DOWNLOAD_PATH = user_addon_download_path
    url = message["url"]
    OPTIONS.append(url)
    p = run(
        OPTIONS,
        capture_output=True,
        text=True,
        cwd=DOWNLOAD_PATH,
    )
    if p.returncode == 0:
        output = json.loads(p.stdout)
        reply = {
            "success": True,
            "path": str(DOWNLOAD_PATH / output["_filename"]),
            "title": output["title"],
            "thumbnail": output["thumbnail"],
        }
    else:
        reply = {
            "success": False,
            "error": p.stderr,
        }
elif action == "open":
    path = message["path"]
    Popen(["xdg-open", path])
    reply = {"success": True}
elif action == "show":
    path = message["path"]
    Popen(["nautilus", "--", path])
    reply = {"success": True}
else:
    print(f"Got unknown action: {message}", file=sys.stderr)
    reply = {"success": False, "error": f"Unknown action: {action}"}


send_message(encode_message(reply))
